// Code generated by go-bindata.
// sources:
// server/data/.DS_Store
// server/data/config/config.yml
// server/data/static/.DS_Store
// server/data/static/build/bundle.css
// server/data/static/build/bundle.js
// server/data/static/build/glyphicons-halflings-regular-89889688147bd7575d6327160d64e760.svg
// server/data/static/build/glyphicons-halflings-regular-e18bbf611f2a2e43afc071aa2f4e1512.ttf
// server/data/static/build/glyphicons-halflings-regular@39add9c7a1f4a4518e3df09c8cea5a7d.eot
// server/data/static/build/glyphicons-halflings-regular@9d6e95fb59f8df43b8fac50a249fa351.ttf
// server/data/static/build/glyphicons-halflings-regular@aab920e04211577da140c01f1f39adff.woff
// server/data/static/images/.DS_Store
// server/data/static/images/favicon.ico
// server/data/static/images/icons/icon-plus.png
// server/data/static/images/icons/icon-plus@2x.png
// server/data/static/images/identity/.DS_Store
// server/data/static/images/identity/typitap-logo-white.png
// server/data/static/images/identity/typitap-logo-white@0.5x.png
// server/data/static/images/identity/typitap-logo-white@1.25x.png
// server/data/static/images/identity/typitap-logo-white@1.5x.png
// server/data/static/images/identity/typitap-logo-white@2x.png
// server/data/static/images/identity/typitap-logo-white@3x.png
// server/data/static/images/identity/typitap-logo-white@4x.png
// server/data/static/images/identity/typitap-logo.png
// server/data/static/images/identity/typitap-logo@0.25x.png
// server/data/static/images/identity/typitap-logo@0.5x.png
// server/data/static/images/identity/typitap-logo@1.25x.png
// server/data/static/images/identity/typitap-logo@1.5x.png
// server/data/static/images/identity/typitap-logo@2x.png
// server/data/static/images/identity/typitap-logo@3x.png
// server/data/static/images/identity/typitap-logo@4x.png
// server/data/static/images/logo-lg.png
// server/data/static/images/pages/.DS_Store
// server/data/static/images/pages/auth/Desktop HD.png
// server/data/static/images/pages/auth/Desktop HD@2x.png
// server/data/static/images/pages/auth/background.png
// server/data/static/images/pages/auth/background@2x.png
// server/data/static/images/pages/homepage/globe - FontAwesome.png
// server/data/static/images/pages/homepage/globe - FontAwesome@2x.png
// server/data/static/images/pages/homepage/icon-chart.png
// server/data/static/images/pages/homepage/icon-chart@2x.png
// server/data/static/images/pages/homepage/icon-comment.png
// server/data/static/images/pages/homepage/icon-comment@2x.png
// server/data/static/images/pages/homepage/icon-globe.png
// server/data/static/images/pages/homepage/icon-globe@2x.png
// server/data/static/images/pages/homepage/icon-trophy.png
// server/data/static/images/pages/homepage/icon-trophy@0.5x.png
// server/data/static/images/pages/homepage/icon-trophy@1.5x.png
// server/data/static/images/pages/homepage/icon-trophy@2x.png
// server/data/templates/react.html
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// Ds_store reads file data from disk. It returns an error on failure.
func Ds_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/.DS_Store"
	name := ".DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configConfigYml reads file data from disk. It returns an error on failure.
func configConfigYml() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/config/config.yml"
	name := "config/config.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDs_store reads file data from disk. It returns an error on failure.
func staticDs_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/.DS_Store"
	name := "static/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleCss reads file data from disk. It returns an error on failure.
func staticBuildBundleCss() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.css"
	name := "static/build/bundle.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleJs reads file data from disk. It returns an error on failure.
func staticBuildBundleJs() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.js"
	name := "static/build/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegular89889688147bd7575d6327160d64e760Svg reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegular89889688147bd7575d6327160d64e760Svg() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular-89889688147bd7575d6327160d64e760.svg"
	name := "static/build/glyphicons-halflings-regular-89889688147bd7575d6327160d64e760.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegularE18bbf611f2a2e43afc071aa2f4e1512Ttf reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegularE18bbf611f2a2e43afc071aa2f4e1512Ttf() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular-e18bbf611f2a2e43afc071aa2f4e1512.ttf"
	name := "static/build/glyphicons-halflings-regular-e18bbf611f2a2e43afc071aa2f4e1512.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegular39add9c7a1f4a4518e3df09c8cea5a7dEot reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegular39add9c7a1f4a4518e3df09c8cea5a7dEot() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@39add9c7a1f4a4518e3df09c8cea5a7d.eot"
	name := "static/build/glyphicons-halflings-regular@39add9c7a1f4a4518e3df09c8cea5a7d.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegular9d6e95fb59f8df43b8fac50a249fa351Ttf reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegular9d6e95fb59f8df43b8fac50a249fa351Ttf() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@9d6e95fb59f8df43b8fac50a249fa351.ttf"
	name := "static/build/glyphicons-halflings-regular@9d6e95fb59f8df43b8fac50a249fa351.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegularAab920e04211577da140c01f1f39adffWoff reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegularAab920e04211577da140c01f1f39adffWoff() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@aab920e04211577da140c01f1f39adff.woff"
	name := "static/build/glyphicons-halflings-regular@aab920e04211577da140c01f1f39adff.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesDs_store reads file data from disk. It returns an error on failure.
func staticImagesDs_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/.DS_Store"
	name := "static/images/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesFaviconIco reads file data from disk. It returns an error on failure.
func staticImagesFaviconIco() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/favicon.ico"
	name := "static/images/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIconsIconPlusPng reads file data from disk. It returns an error on failure.
func staticImagesIconsIconPlusPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/icons/icon-plus.png"
	name := "static/images/icons/icon-plus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIconsIconPlus2xPng reads file data from disk. It returns an error on failure.
func staticImagesIconsIconPlus2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/icons/icon-plus@2x.png"
	name := "static/images/icons/icon-plus@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityDs_store reads file data from disk. It returns an error on failure.
func staticImagesIdentityDs_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/.DS_Store"
	name := "static/images/identity/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhitePng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhitePng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white.png"
	name := "static/images/identity/typitap-logo-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite05xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite05xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@0.5x.png"
	name := "static/images/identity/typitap-logo-white@0.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite125xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite125xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@1.25x.png"
	name := "static/images/identity/typitap-logo-white@1.25x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite15xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite15xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@1.5x.png"
	name := "static/images/identity/typitap-logo-white@1.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite2xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@2x.png"
	name := "static/images/identity/typitap-logo-white@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite3xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite3xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@3x.png"
	name := "static/images/identity/typitap-logo-white@3x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoWhite4xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoWhite4xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo-white@4x.png"
	name := "static/images/identity/typitap-logo-white@4x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogoPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogoPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo.png"
	name := "static/images/identity/typitap-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo025xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo025xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@0.25x.png"
	name := "static/images/identity/typitap-logo@0.25x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo05xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo05xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@0.5x.png"
	name := "static/images/identity/typitap-logo@0.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo125xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo125xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@1.25x.png"
	name := "static/images/identity/typitap-logo@1.25x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo15xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo15xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@1.5x.png"
	name := "static/images/identity/typitap-logo@1.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo2xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@2x.png"
	name := "static/images/identity/typitap-logo@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo3xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo3xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@3x.png"
	name := "static/images/identity/typitap-logo@3x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesIdentityTypitapLogo4xPng reads file data from disk. It returns an error on failure.
func staticImagesIdentityTypitapLogo4xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/identity/typitap-logo@4x.png"
	name := "static/images/identity/typitap-logo@4x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesLogoLgPng reads file data from disk. It returns an error on failure.
func staticImagesLogoLgPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/logo-lg.png"
	name := "static/images/logo-lg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesDs_store reads file data from disk. It returns an error on failure.
func staticImagesPagesDs_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/.DS_Store"
	name := "static/images/pages/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesAuthDesktopHdPng reads file data from disk. It returns an error on failure.
func staticImagesPagesAuthDesktopHdPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/auth/Desktop HD.png"
	name := "static/images/pages/auth/Desktop HD.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesAuthDesktopHd2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesAuthDesktopHd2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/auth/Desktop HD@2x.png"
	name := "static/images/pages/auth/Desktop HD@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesAuthBackgroundPng reads file data from disk. It returns an error on failure.
func staticImagesPagesAuthBackgroundPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/auth/background.png"
	name := "static/images/pages/auth/background.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesAuthBackground2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesAuthBackground2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/auth/background@2x.png"
	name := "static/images/pages/auth/background@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageGlobeFontawesomePng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageGlobeFontawesomePng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/globe - FontAwesome.png"
	name := "static/images/pages/homepage/globe - FontAwesome.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageGlobeFontawesome2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageGlobeFontawesome2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/globe - FontAwesome@2x.png"
	name := "static/images/pages/homepage/globe - FontAwesome@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconChartPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconChartPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-chart.png"
	name := "static/images/pages/homepage/icon-chart.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconChart2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconChart2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-chart@2x.png"
	name := "static/images/pages/homepage/icon-chart@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconCommentPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconCommentPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-comment.png"
	name := "static/images/pages/homepage/icon-comment.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconComment2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconComment2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-comment@2x.png"
	name := "static/images/pages/homepage/icon-comment@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconGlobePng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconGlobePng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-globe.png"
	name := "static/images/pages/homepage/icon-globe.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconGlobe2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconGlobe2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-globe@2x.png"
	name := "static/images/pages/homepage/icon-globe@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconTrophyPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconTrophyPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-trophy.png"
	name := "static/images/pages/homepage/icon-trophy.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconTrophy05xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconTrophy05xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-trophy@0.5x.png"
	name := "static/images/pages/homepage/icon-trophy@0.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconTrophy15xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconTrophy15xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-trophy@1.5x.png"
	name := "static/images/pages/homepage/icon-trophy@1.5x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesPagesHomepageIconTrophy2xPng reads file data from disk. It returns an error on failure.
func staticImagesPagesHomepageIconTrophy2xPng() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/images/pages/homepage/icon-trophy@2x.png"
	name := "static/images/pages/homepage/icon-trophy@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesReactHtml reads file data from disk. It returns an error on failure.
func templatesReactHtml() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/templates/react.html"
	name := "templates/react.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"config/config.yml": configConfigYml,
	"static/.DS_Store": staticDs_store,
	"static/build/bundle.css": staticBuildBundleCss,
	"static/build/bundle.js": staticBuildBundleJs,
	"static/build/glyphicons-halflings-regular-89889688147bd7575d6327160d64e760.svg": staticBuildGlyphiconsHalflingsRegular89889688147bd7575d6327160d64e760Svg,
	"static/build/glyphicons-halflings-regular-e18bbf611f2a2e43afc071aa2f4e1512.ttf": staticBuildGlyphiconsHalflingsRegularE18bbf611f2a2e43afc071aa2f4e1512Ttf,
	"static/build/glyphicons-halflings-regular@39add9c7a1f4a4518e3df09c8cea5a7d.eot": staticBuildGlyphiconsHalflingsRegular39add9c7a1f4a4518e3df09c8cea5a7dEot,
	"static/build/glyphicons-halflings-regular@9d6e95fb59f8df43b8fac50a249fa351.ttf": staticBuildGlyphiconsHalflingsRegular9d6e95fb59f8df43b8fac50a249fa351Ttf,
	"static/build/glyphicons-halflings-regular@aab920e04211577da140c01f1f39adff.woff": staticBuildGlyphiconsHalflingsRegularAab920e04211577da140c01f1f39adffWoff,
	"static/images/.DS_Store": staticImagesDs_store,
	"static/images/favicon.ico": staticImagesFaviconIco,
	"static/images/icons/icon-plus.png": staticImagesIconsIconPlusPng,
	"static/images/icons/icon-plus@2x.png": staticImagesIconsIconPlus2xPng,
	"static/images/identity/.DS_Store": staticImagesIdentityDs_store,
	"static/images/identity/typitap-logo-white.png": staticImagesIdentityTypitapLogoWhitePng,
	"static/images/identity/typitap-logo-white@0.5x.png": staticImagesIdentityTypitapLogoWhite05xPng,
	"static/images/identity/typitap-logo-white@1.25x.png": staticImagesIdentityTypitapLogoWhite125xPng,
	"static/images/identity/typitap-logo-white@1.5x.png": staticImagesIdentityTypitapLogoWhite15xPng,
	"static/images/identity/typitap-logo-white@2x.png": staticImagesIdentityTypitapLogoWhite2xPng,
	"static/images/identity/typitap-logo-white@3x.png": staticImagesIdentityTypitapLogoWhite3xPng,
	"static/images/identity/typitap-logo-white@4x.png": staticImagesIdentityTypitapLogoWhite4xPng,
	"static/images/identity/typitap-logo.png": staticImagesIdentityTypitapLogoPng,
	"static/images/identity/typitap-logo@0.25x.png": staticImagesIdentityTypitapLogo025xPng,
	"static/images/identity/typitap-logo@0.5x.png": staticImagesIdentityTypitapLogo05xPng,
	"static/images/identity/typitap-logo@1.25x.png": staticImagesIdentityTypitapLogo125xPng,
	"static/images/identity/typitap-logo@1.5x.png": staticImagesIdentityTypitapLogo15xPng,
	"static/images/identity/typitap-logo@2x.png": staticImagesIdentityTypitapLogo2xPng,
	"static/images/identity/typitap-logo@3x.png": staticImagesIdentityTypitapLogo3xPng,
	"static/images/identity/typitap-logo@4x.png": staticImagesIdentityTypitapLogo4xPng,
	"static/images/logo-lg.png": staticImagesLogoLgPng,
	"static/images/pages/.DS_Store": staticImagesPagesDs_store,
	"static/images/pages/auth/Desktop HD.png": staticImagesPagesAuthDesktopHdPng,
	"static/images/pages/auth/Desktop HD@2x.png": staticImagesPagesAuthDesktopHd2xPng,
	"static/images/pages/auth/background.png": staticImagesPagesAuthBackgroundPng,
	"static/images/pages/auth/background@2x.png": staticImagesPagesAuthBackground2xPng,
	"static/images/pages/homepage/globe - FontAwesome.png": staticImagesPagesHomepageGlobeFontawesomePng,
	"static/images/pages/homepage/globe - FontAwesome@2x.png": staticImagesPagesHomepageGlobeFontawesome2xPng,
	"static/images/pages/homepage/icon-chart.png": staticImagesPagesHomepageIconChartPng,
	"static/images/pages/homepage/icon-chart@2x.png": staticImagesPagesHomepageIconChart2xPng,
	"static/images/pages/homepage/icon-comment.png": staticImagesPagesHomepageIconCommentPng,
	"static/images/pages/homepage/icon-comment@2x.png": staticImagesPagesHomepageIconComment2xPng,
	"static/images/pages/homepage/icon-globe.png": staticImagesPagesHomepageIconGlobePng,
	"static/images/pages/homepage/icon-globe@2x.png": staticImagesPagesHomepageIconGlobe2xPng,
	"static/images/pages/homepage/icon-trophy.png": staticImagesPagesHomepageIconTrophyPng,
	"static/images/pages/homepage/icon-trophy@0.5x.png": staticImagesPagesHomepageIconTrophy05xPng,
	"static/images/pages/homepage/icon-trophy@1.5x.png": staticImagesPagesHomepageIconTrophy15xPng,
	"static/images/pages/homepage/icon-trophy@2x.png": staticImagesPagesHomepageIconTrophy2xPng,
	"templates/react.html": templatesReactHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"config": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{configConfigYml, map[string]*bintree{}},
	}},
	"static": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{staticDs_store, map[string]*bintree{}},
		"build": &bintree{nil, map[string]*bintree{
			"bundle.css": &bintree{staticBuildBundleCss, map[string]*bintree{}},
			"bundle.js": &bintree{staticBuildBundleJs, map[string]*bintree{}},
			"glyphicons-halflings-regular-89889688147bd7575d6327160d64e760.svg": &bintree{staticBuildGlyphiconsHalflingsRegular89889688147bd7575d6327160d64e760Svg, map[string]*bintree{}},
			"glyphicons-halflings-regular-e18bbf611f2a2e43afc071aa2f4e1512.ttf": &bintree{staticBuildGlyphiconsHalflingsRegularE18bbf611f2a2e43afc071aa2f4e1512Ttf, map[string]*bintree{}},
			"glyphicons-halflings-regular@39add9c7a1f4a4518e3df09c8cea5a7d.eot": &bintree{staticBuildGlyphiconsHalflingsRegular39add9c7a1f4a4518e3df09c8cea5a7dEot, map[string]*bintree{}},
			"glyphicons-halflings-regular@9d6e95fb59f8df43b8fac50a249fa351.ttf": &bintree{staticBuildGlyphiconsHalflingsRegular9d6e95fb59f8df43b8fac50a249fa351Ttf, map[string]*bintree{}},
			"glyphicons-halflings-regular@aab920e04211577da140c01f1f39adff.woff": &bintree{staticBuildGlyphiconsHalflingsRegularAab920e04211577da140c01f1f39adffWoff, map[string]*bintree{}},
		}},
		"images": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{staticImagesDs_store, map[string]*bintree{}},
			"favicon.ico": &bintree{staticImagesFaviconIco, map[string]*bintree{}},
			"icons": &bintree{nil, map[string]*bintree{
				"icon-plus.png": &bintree{staticImagesIconsIconPlusPng, map[string]*bintree{}},
				"icon-plus@2x.png": &bintree{staticImagesIconsIconPlus2xPng, map[string]*bintree{}},
			}},
			"identity": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{staticImagesIdentityDs_store, map[string]*bintree{}},
				"typitap-logo-white.png": &bintree{staticImagesIdentityTypitapLogoWhitePng, map[string]*bintree{}},
				"typitap-logo-white@0.5x.png": &bintree{staticImagesIdentityTypitapLogoWhite05xPng, map[string]*bintree{}},
				"typitap-logo-white@1.25x.png": &bintree{staticImagesIdentityTypitapLogoWhite125xPng, map[string]*bintree{}},
				"typitap-logo-white@1.5x.png": &bintree{staticImagesIdentityTypitapLogoWhite15xPng, map[string]*bintree{}},
				"typitap-logo-white@2x.png": &bintree{staticImagesIdentityTypitapLogoWhite2xPng, map[string]*bintree{}},
				"typitap-logo-white@3x.png": &bintree{staticImagesIdentityTypitapLogoWhite3xPng, map[string]*bintree{}},
				"typitap-logo-white@4x.png": &bintree{staticImagesIdentityTypitapLogoWhite4xPng, map[string]*bintree{}},
				"typitap-logo.png": &bintree{staticImagesIdentityTypitapLogoPng, map[string]*bintree{}},
				"typitap-logo@0.25x.png": &bintree{staticImagesIdentityTypitapLogo025xPng, map[string]*bintree{}},
				"typitap-logo@0.5x.png": &bintree{staticImagesIdentityTypitapLogo05xPng, map[string]*bintree{}},
				"typitap-logo@1.25x.png": &bintree{staticImagesIdentityTypitapLogo125xPng, map[string]*bintree{}},
				"typitap-logo@1.5x.png": &bintree{staticImagesIdentityTypitapLogo15xPng, map[string]*bintree{}},
				"typitap-logo@2x.png": &bintree{staticImagesIdentityTypitapLogo2xPng, map[string]*bintree{}},
				"typitap-logo@3x.png": &bintree{staticImagesIdentityTypitapLogo3xPng, map[string]*bintree{}},
				"typitap-logo@4x.png": &bintree{staticImagesIdentityTypitapLogo4xPng, map[string]*bintree{}},
			}},
			"logo-lg.png": &bintree{staticImagesLogoLgPng, map[string]*bintree{}},
			"pages": &bintree{nil, map[string]*bintree{
				".DS_Store": &bintree{staticImagesPagesDs_store, map[string]*bintree{}},
				"auth": &bintree{nil, map[string]*bintree{
					"Desktop HD.png": &bintree{staticImagesPagesAuthDesktopHdPng, map[string]*bintree{}},
					"Desktop HD@2x.png": &bintree{staticImagesPagesAuthDesktopHd2xPng, map[string]*bintree{}},
					"background.png": &bintree{staticImagesPagesAuthBackgroundPng, map[string]*bintree{}},
					"background@2x.png": &bintree{staticImagesPagesAuthBackground2xPng, map[string]*bintree{}},
				}},
				"homepage": &bintree{nil, map[string]*bintree{
					"globe - FontAwesome.png": &bintree{staticImagesPagesHomepageGlobeFontawesomePng, map[string]*bintree{}},
					"globe - FontAwesome@2x.png": &bintree{staticImagesPagesHomepageGlobeFontawesome2xPng, map[string]*bintree{}},
					"icon-chart.png": &bintree{staticImagesPagesHomepageIconChartPng, map[string]*bintree{}},
					"icon-chart@2x.png": &bintree{staticImagesPagesHomepageIconChart2xPng, map[string]*bintree{}},
					"icon-comment.png": &bintree{staticImagesPagesHomepageIconCommentPng, map[string]*bintree{}},
					"icon-comment@2x.png": &bintree{staticImagesPagesHomepageIconComment2xPng, map[string]*bintree{}},
					"icon-globe.png": &bintree{staticImagesPagesHomepageIconGlobePng, map[string]*bintree{}},
					"icon-globe@2x.png": &bintree{staticImagesPagesHomepageIconGlobe2xPng, map[string]*bintree{}},
					"icon-trophy.png": &bintree{staticImagesPagesHomepageIconTrophyPng, map[string]*bintree{}},
					"icon-trophy@0.5x.png": &bintree{staticImagesPagesHomepageIconTrophy05xPng, map[string]*bintree{}},
					"icon-trophy@1.5x.png": &bintree{staticImagesPagesHomepageIconTrophy15xPng, map[string]*bintree{}},
					"icon-trophy@2x.png": &bintree{staticImagesPagesHomepageIconTrophy2xPng, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"react.html": &bintree{templatesReactHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

