// Code generated by go-bindata.
// sources:
// server/data/.DS_Store
// server/data/config/config.yml
// server/data/config/route_roles.yml
// server/data/static/.DS_Store
// server/data/static/3f8c661f48fe8bfda6d42d796d1a38de.txt
// server/data/static/build/448c34a56d699c29117adc64c43affeb.woff2
// server/data/static/build/674f50d287a8c48dc19ba404d20fe713.eot
// server/data/static/build/89889688147bd7575d6327160d64e760.svg
// server/data/static/build/912ec66d7572ff821749319396470bde.svg
// server/data/static/build/af7ae505a9eed503f8b8e6982036873e.woff2
// server/data/static/build/b06871f281fee6b241d60582ae9369b9.ttf
// server/data/static/build/bundle.css
// server/data/static/build/bundle.css.gz
// server/data/static/build/bundle.js
// server/data/static/build/bundle.js.gz
// server/data/static/build/e18bbf611f2a2e43afc071aa2f4e1512.ttf
// server/data/static/build/f4769f9bdb7466be65088239c12046d1.eot
// server/data/static/build/fa2772327f55d8198301fdb8bcfc8158.woff
// server/data/static/build/fee66e712a8a08eef5805a46892932ad.woff
// server/data/static/build/fontawesome-webfont@6045cd568079c6e57108705d7773fe11.eot
// server/data/static/build/glyphicons-halflings-regular@8497bd0c73f50b6afd254f5c735c9dc9.eot
// server/data/static/build/glyphicons-halflings-regular@aa2a73c7454e26a3cfc9e000da0de92f.ttf
// server/data/static/build/glyphicons-halflings-regular@d84e980ff3de735316d86a48d6b6288e.woff
// server/data/templates/react.html
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// Ds_store reads file data from disk. It returns an error on failure.
func Ds_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/.DS_Store"
	name := ".DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configConfigYml reads file data from disk. It returns an error on failure.
func configConfigYml() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/config/config.yml"
	name := "config/config.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configRoute_rolesYml reads file data from disk. It returns an error on failure.
func configRoute_rolesYml() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/config/route_roles.yml"
	name := "config/route_roles.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDs_store reads file data from disk. It returns an error on failure.
func staticDs_store() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/.DS_Store"
	name := "static/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// static3f8c661f48fe8bfda6d42d796d1a38deTxt reads file data from disk. It returns an error on failure.
func static3f8c661f48fe8bfda6d42d796d1a38deTxt() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/3f8c661f48fe8bfda6d42d796d1a38de.txt"
	name := "static/3f8c661f48fe8bfda6d42d796d1a38de.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuild448c34a56d699c29117adc64c43affebWoff2 reads file data from disk. It returns an error on failure.
func staticBuild448c34a56d699c29117adc64c43affebWoff2() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/448c34a56d699c29117adc64c43affeb.woff2"
	name := "static/build/448c34a56d699c29117adc64c43affeb.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuild674f50d287a8c48dc19ba404d20fe713Eot reads file data from disk. It returns an error on failure.
func staticBuild674f50d287a8c48dc19ba404d20fe713Eot() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/674f50d287a8c48dc19ba404d20fe713.eot"
	name := "static/build/674f50d287a8c48dc19ba404d20fe713.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuild89889688147bd7575d6327160d64e760Svg reads file data from disk. It returns an error on failure.
func staticBuild89889688147bd7575d6327160d64e760Svg() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/89889688147bd7575d6327160d64e760.svg"
	name := "static/build/89889688147bd7575d6327160d64e760.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuild912ec66d7572ff821749319396470bdeSvg reads file data from disk. It returns an error on failure.
func staticBuild912ec66d7572ff821749319396470bdeSvg() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/912ec66d7572ff821749319396470bde.svg"
	name := "static/build/912ec66d7572ff821749319396470bde.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildAf7ae505a9eed503f8b8e6982036873eWoff2 reads file data from disk. It returns an error on failure.
func staticBuildAf7ae505a9eed503f8b8e6982036873eWoff2() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/af7ae505a9eed503f8b8e6982036873e.woff2"
	name := "static/build/af7ae505a9eed503f8b8e6982036873e.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildB06871f281fee6b241d60582ae9369b9Ttf reads file data from disk. It returns an error on failure.
func staticBuildB06871f281fee6b241d60582ae9369b9Ttf() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/b06871f281fee6b241d60582ae9369b9.ttf"
	name := "static/build/b06871f281fee6b241d60582ae9369b9.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleCss reads file data from disk. It returns an error on failure.
func staticBuildBundleCss() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.css"
	name := "static/build/bundle.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleCssGz reads file data from disk. It returns an error on failure.
func staticBuildBundleCssGz() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.css.gz"
	name := "static/build/bundle.css.gz"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleJs reads file data from disk. It returns an error on failure.
func staticBuildBundleJs() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.js"
	name := "static/build/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildBundleJsGz reads file data from disk. It returns an error on failure.
func staticBuildBundleJsGz() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/bundle.js.gz"
	name := "static/build/bundle.js.gz"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildE18bbf611f2a2e43afc071aa2f4e1512Ttf reads file data from disk. It returns an error on failure.
func staticBuildE18bbf611f2a2e43afc071aa2f4e1512Ttf() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/e18bbf611f2a2e43afc071aa2f4e1512.ttf"
	name := "static/build/e18bbf611f2a2e43afc071aa2f4e1512.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildF4769f9bdb7466be65088239c12046d1Eot reads file data from disk. It returns an error on failure.
func staticBuildF4769f9bdb7466be65088239c12046d1Eot() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/f4769f9bdb7466be65088239c12046d1.eot"
	name := "static/build/f4769f9bdb7466be65088239c12046d1.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildFa2772327f55d8198301fdb8bcfc8158Woff reads file data from disk. It returns an error on failure.
func staticBuildFa2772327f55d8198301fdb8bcfc8158Woff() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/fa2772327f55d8198301fdb8bcfc8158.woff"
	name := "static/build/fa2772327f55d8198301fdb8bcfc8158.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildFee66e712a8a08eef5805a46892932adWoff reads file data from disk. It returns an error on failure.
func staticBuildFee66e712a8a08eef5805a46892932adWoff() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/fee66e712a8a08eef5805a46892932ad.woff"
	name := "static/build/fee66e712a8a08eef5805a46892932ad.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildFontawesomeWebfont6045cd568079c6e57108705d7773fe11Eot reads file data from disk. It returns an error on failure.
func staticBuildFontawesomeWebfont6045cd568079c6e57108705d7773fe11Eot() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/fontawesome-webfont@6045cd568079c6e57108705d7773fe11.eot"
	name := "static/build/fontawesome-webfont@6045cd568079c6e57108705d7773fe11.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegular8497bd0c73f50b6afd254f5c735c9dc9Eot reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegular8497bd0c73f50b6afd254f5c735c9dc9Eot() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@8497bd0c73f50b6afd254f5c735c9dc9.eot"
	name := "static/build/glyphicons-halflings-regular@8497bd0c73f50b6afd254f5c735c9dc9.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegularAa2a73c7454e26a3cfc9e000da0de92fTtf reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegularAa2a73c7454e26a3cfc9e000da0de92fTtf() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@aa2a73c7454e26a3cfc9e000da0de92f.ttf"
	name := "static/build/glyphicons-halflings-regular@aa2a73c7454e26a3cfc9e000da0de92f.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBuildGlyphiconsHalflingsRegularD84e980ff3de735316d86a48d6b6288eWoff reads file data from disk. It returns an error on failure.
func staticBuildGlyphiconsHalflingsRegularD84e980ff3de735316d86a48d6b6288eWoff() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/static/build/glyphicons-halflings-regular@d84e980ff3de735316d86a48d6b6288e.woff"
	name := "static/build/glyphicons-halflings-regular@d84e980ff3de735316d86a48d6b6288e.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesReactHtml reads file data from disk. It returns an error on failure.
func templatesReactHtml() (*asset, error) {
	path := "/Users/konrad/Projects/Go/src/github.com/iKonrad/typitap/server/data/templates/react.html"
	name := "templates/react.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"config/config.yml": configConfigYml,
	"config/route_roles.yml": configRoute_rolesYml,
	"static/.DS_Store": staticDs_store,
	"static/3f8c661f48fe8bfda6d42d796d1a38de.txt": static3f8c661f48fe8bfda6d42d796d1a38deTxt,
	"static/build/448c34a56d699c29117adc64c43affeb.woff2": staticBuild448c34a56d699c29117adc64c43affebWoff2,
	"static/build/674f50d287a8c48dc19ba404d20fe713.eot": staticBuild674f50d287a8c48dc19ba404d20fe713Eot,
	"static/build/89889688147bd7575d6327160d64e760.svg": staticBuild89889688147bd7575d6327160d64e760Svg,
	"static/build/912ec66d7572ff821749319396470bde.svg": staticBuild912ec66d7572ff821749319396470bdeSvg,
	"static/build/af7ae505a9eed503f8b8e6982036873e.woff2": staticBuildAf7ae505a9eed503f8b8e6982036873eWoff2,
	"static/build/b06871f281fee6b241d60582ae9369b9.ttf": staticBuildB06871f281fee6b241d60582ae9369b9Ttf,
	"static/build/bundle.css": staticBuildBundleCss,
	"static/build/bundle.css.gz": staticBuildBundleCssGz,
	"static/build/bundle.js": staticBuildBundleJs,
	"static/build/bundle.js.gz": staticBuildBundleJsGz,
	"static/build/e18bbf611f2a2e43afc071aa2f4e1512.ttf": staticBuildE18bbf611f2a2e43afc071aa2f4e1512Ttf,
	"static/build/f4769f9bdb7466be65088239c12046d1.eot": staticBuildF4769f9bdb7466be65088239c12046d1Eot,
	"static/build/fa2772327f55d8198301fdb8bcfc8158.woff": staticBuildFa2772327f55d8198301fdb8bcfc8158Woff,
	"static/build/fee66e712a8a08eef5805a46892932ad.woff": staticBuildFee66e712a8a08eef5805a46892932adWoff,
	"static/build/fontawesome-webfont@6045cd568079c6e57108705d7773fe11.eot": staticBuildFontawesomeWebfont6045cd568079c6e57108705d7773fe11Eot,
	"static/build/glyphicons-halflings-regular@8497bd0c73f50b6afd254f5c735c9dc9.eot": staticBuildGlyphiconsHalflingsRegular8497bd0c73f50b6afd254f5c735c9dc9Eot,
	"static/build/glyphicons-halflings-regular@aa2a73c7454e26a3cfc9e000da0de92f.ttf": staticBuildGlyphiconsHalflingsRegularAa2a73c7454e26a3cfc9e000da0de92fTtf,
	"static/build/glyphicons-halflings-regular@d84e980ff3de735316d86a48d6b6288e.woff": staticBuildGlyphiconsHalflingsRegularD84e980ff3de735316d86a48d6b6288eWoff,
	"templates/react.html": templatesReactHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"config": &bintree{nil, map[string]*bintree{
		"config.yml": &bintree{configConfigYml, map[string]*bintree{}},
		"route_roles.yml": &bintree{configRoute_rolesYml, map[string]*bintree{}},
	}},
	"static": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{staticDs_store, map[string]*bintree{}},
		"3f8c661f48fe8bfda6d42d796d1a38de.txt": &bintree{static3f8c661f48fe8bfda6d42d796d1a38deTxt, map[string]*bintree{}},
		"build": &bintree{nil, map[string]*bintree{
			"448c34a56d699c29117adc64c43affeb.woff2": &bintree{staticBuild448c34a56d699c29117adc64c43affebWoff2, map[string]*bintree{}},
			"674f50d287a8c48dc19ba404d20fe713.eot": &bintree{staticBuild674f50d287a8c48dc19ba404d20fe713Eot, map[string]*bintree{}},
			"89889688147bd7575d6327160d64e760.svg": &bintree{staticBuild89889688147bd7575d6327160d64e760Svg, map[string]*bintree{}},
			"912ec66d7572ff821749319396470bde.svg": &bintree{staticBuild912ec66d7572ff821749319396470bdeSvg, map[string]*bintree{}},
			"af7ae505a9eed503f8b8e6982036873e.woff2": &bintree{staticBuildAf7ae505a9eed503f8b8e6982036873eWoff2, map[string]*bintree{}},
			"b06871f281fee6b241d60582ae9369b9.ttf": &bintree{staticBuildB06871f281fee6b241d60582ae9369b9Ttf, map[string]*bintree{}},
			"bundle.css": &bintree{staticBuildBundleCss, map[string]*bintree{}},
			"bundle.css.gz": &bintree{staticBuildBundleCssGz, map[string]*bintree{}},
			"bundle.js": &bintree{staticBuildBundleJs, map[string]*bintree{}},
			"bundle.js.gz": &bintree{staticBuildBundleJsGz, map[string]*bintree{}},
			"e18bbf611f2a2e43afc071aa2f4e1512.ttf": &bintree{staticBuildE18bbf611f2a2e43afc071aa2f4e1512Ttf, map[string]*bintree{}},
			"f4769f9bdb7466be65088239c12046d1.eot": &bintree{staticBuildF4769f9bdb7466be65088239c12046d1Eot, map[string]*bintree{}},
			"fa2772327f55d8198301fdb8bcfc8158.woff": &bintree{staticBuildFa2772327f55d8198301fdb8bcfc8158Woff, map[string]*bintree{}},
			"fee66e712a8a08eef5805a46892932ad.woff": &bintree{staticBuildFee66e712a8a08eef5805a46892932adWoff, map[string]*bintree{}},
			"fontawesome-webfont@6045cd568079c6e57108705d7773fe11.eot": &bintree{staticBuildFontawesomeWebfont6045cd568079c6e57108705d7773fe11Eot, map[string]*bintree{}},
			"glyphicons-halflings-regular@8497bd0c73f50b6afd254f5c735c9dc9.eot": &bintree{staticBuildGlyphiconsHalflingsRegular8497bd0c73f50b6afd254f5c735c9dc9Eot, map[string]*bintree{}},
			"glyphicons-halflings-regular@aa2a73c7454e26a3cfc9e000da0de92f.ttf": &bintree{staticBuildGlyphiconsHalflingsRegularAa2a73c7454e26a3cfc9e000da0de92fTtf, map[string]*bintree{}},
			"glyphicons-halflings-regular@d84e980ff3de735316d86a48d6b6288e.woff": &bintree{staticBuildGlyphiconsHalflingsRegularD84e980ff3de735316d86a48d6b6288eWoff, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"react.html": &bintree{templatesReactHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

